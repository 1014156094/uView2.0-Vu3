/**
 * 此为wxs模块，只支持APP-VUE，微信和QQ小程序以及H5平台
 * wxs内部不支持es6语法，变量只能使用var定义，无法使用解构，箭头函数等特性
 */

// 开始触摸
function touchstart(event, ownerInstance) {
	// 触发事件的组件的ComponentDescriptor实例
	var instance = event.instance
	// wxs内的局部变量快照，此快照是属于整个组件的，在touchstart和touchmove事件中都能获取到相同的结果
	var state = instance.getState()
	if (state.disable) return
	var touches = event.touches
	// 如果进行的是多指触控，不允许进行操作
	if (touches && touches.length > 1) return
	// 标识当前为滑动中状态
	state.moving = true
	console.log(event);
	// 记录触摸开始点的坐标值
	state.startX = touches[0].pageX
	state.startY = touches[0].pageY
}

// 触摸滑动
function touchmove(event, ownerInstance) {
	// 触发事件的组件的ComponentDescriptor实例
	var instance = event.instance
	// wxs内的局部变量快照
	var state = instance.getState()
	if(!state.moving) return
	var touches = event.touches
	var pageX = touches[0].pageX
	var pageY = touches[0].pageY
	var moveX = pageX - state.startX
	
	// 限制右滑的距离，不允许内容部分往右偏移，右滑会导致X轴偏移值大于0，以此做判断
	// 此处不能直接return，因为滑动过程中会缺失某些关键点坐标，会导致错乱，最好的办法就是
	// 在超出后，设置为0
	if(moveX > 0) moveX = 0
	// 滑动的距离不允许超过所有按钮的总宽度，此时只能是左滑，最终设置按钮的总宽度，同时为负数
	if(Math.abs(moveX) > state.buttonsWidth) moveX = -state.buttonsWidth
	
	// 只要是在滑过程中，就不断移动菜单的内容部分，从而使隐藏的菜单显示出来
	moveSwipeAction(moveX, instance, ownerInstance)
}

// 触摸结束
function touchend(event, ownerInstance) {
	// 触发事件的组件的ComponentDescriptor实例
	var instance = event.instance
	// wxs内的局部变量快照
	var state = instance.getState()
	// 标识滑动结束
	state.moving = false
	
}

// 滑动结束时判断滑动的方向
function getMoveDirection(instance, ownerInstance) {
	var state = instance.getState()
}

// 移动滑动选择器内容区域，同时显示出其隐藏的菜单
function moveSwipeAction(moveX, instance, ownerInstance) {
	var state = instance.getState()
	// 获取所有按钮的实例，需要通过它去设置按钮的位移
	var buttons = ownerInstance.selectAllComponents('.u-swipe-action-item__right__button')
	var len = buttons.length
	var previewButtonsMoveX = 0
	
	// 设置菜单内容部分的偏移
	instance.requestAnimationFrame(function() {
		instance.setStyle({
			// 设置translateX的值
			transform: 'translateX(' + moveX + 'px)',
			'-webkit-transform': 'translateX(' + moveX + 'px)'
		})
		// 折叠按钮动画
		for(var i = len - 1; i >= 0; i --) {
			// 通过比例，得出元素自身该移动的距离
			var translateX = state.buttons[i].width / state.buttonsWidth * moveX
			// 最终移动的距离，是通过自身比例算出的距离，再加上在它之前所有按钮移动的距离之和
			var realTranslateX = translateX + previewButtonsMoveX
			buttons[i].setStyle({
				'transform': 'translateX(' + realTranslateX + 'px)'
			})
			// 记录本按钮之前的所有按钮的移动距离之和
			previewButtonsMoveX += translateX
		}
	})
}

// 菜单尺寸发生变化
function sizeChange(newValue, oldValue, ownerInstance, instance) {
	// wxs内的局部变量快照
	var state = instance.getState()
	state.disabed = newValue.disabled
	state.duration = newValue.duration
	state.show = newValue.show
	state.threshold = newValue.threshold
	state.buttons = newValue.buttons
	
	var len = state.buttons.length
	if(len) {
		var buttonsWidth = 0
		var buttons = newValue.buttons
		for(var i = 0; i < len; i ++) {
			buttonsWidth += buttons[i].width
		}
	}
	state.buttonsWidth = buttonsWidth
}

module.exports = {
	touchstart: touchstart,
	touchmove: touchmove,
	touchend: touchend,
	sizeChange: sizeChange
}